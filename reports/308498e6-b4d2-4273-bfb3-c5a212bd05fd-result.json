{"name": "test_vwologin", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=115.0.5790.170)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF6D3CD4A62+57106]\n\t(No symbol) [0x00007FF6D3C4CF52]\n\t(No symbol) [0x00007FF6D3B1E2CB]\n\t(No symbol) [0x00007FF6D3B57732]\n\t(No symbol) [0x00007FF6D3B5795C]\n\t(No symbol) [0x00007FF6D3B90477]\n\t(No symbol) [0x00007FF6D3B769FF]\n\t(No symbol) [0x00007FF6D3B8E522]\n\t(No symbol) [0x00007FF6D3B76793]\n\t(No symbol) [0x00007FF6D3B4CE81]\n\t(No symbol) [0x00007FF6D3B4E064]\n\tGetHandleVerifier [0x00007FF6D3F84222+2873042]\n\tGetHandleVerifier [0x00007FF6D3FD6590+3209792]\n\tGetHandleVerifier [0x00007FF6D3FCF3AF+3180639]\n\tGetHandleVerifier [0x00007FF6D3D65F25+652245]\n\t(No symbol) [0x00007FF6D3C58618]\n\t(No symbol) [0x00007FF6D3C547C4]\n\t(No symbol) [0x00007FF6D3C548BC]\n\t(No symbol) [0x00007FF6D3C44C33]\n\tBaseThreadInitThunk [0x00007FFC1D4526AD+29]\n\tRtlUserThreadStart [0x00007FFC1F08AA68+40]", "trace": "def test_vwologin():\n        logger = logging.getLogger((__name__))\n        # Selenium API - Create Session\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n    \n        # Open the Browser\n        # Navigate to a URL\n        # Command - driver.get (Navigate command to Existing Session)\n        driver.get(\"https://app.vwo.com/\")\n    \n        # Find the Email Web element and put email id = \"abc@gmail.com\n        # Find the Password input box and enter the password =123\n        # Click on the button - Sign in\n        email_element = driver.find_element(By.ID, \"login-username\")\n>       password_element = driver.find_element((By.ID, \"login-password\"))\n\ntests\\test_vwologin.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000204E2DCC5D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...07FF6D3C44C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC1D4526AD+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC1F08AA68+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=115.0.5790.170)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF6D3CD4A62+57106]\nE       \t(No symbol) [0x00007FF6D3C4CF52]\nE       \t(No symbol) [0x00007FF6D3B1E2CB]\nE       \t(No symbol) [0x00007FF6D3B57732]\nE       \t(No symbol) [0x00007FF6D3B5795C]\nE       \t(No symbol) [0x00007FF6D3B90477]\nE       \t(No symbol) [0x00007FF6D3B769FF]\nE       \t(No symbol) [0x00007FF6D3B8E522]\nE       \t(No symbol) [0x00007FF6D3B76793]\nE       \t(No symbol) [0x00007FF6D3B4CE81]\nE       \t(No symbol) [0x00007FF6D3B4E064]\nE       \tGetHandleVerifier [0x00007FF6D3F84222+2873042]\nE       \tGetHandleVerifier [0x00007FF6D3FD6590+3209792]\nE       \tGetHandleVerifier [0x00007FF6D3FCF3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF6D3D65F25+652245]\nE       \t(No symbol) [0x00007FF6D3C58618]\nE       \t(No symbol) [0x00007FF6D3C547C4]\nE       \t(No symbol) [0x00007FF6D3C548BC]\nE       \t(No symbol) [0x00007FF6D3C44C33]\nE       \tBaseThreadInitThunk [0x00007FFC1D4526AD+29]\nE       \tRtlUserThreadStart [0x00007FFC1F08AA68+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "start": 1692099156255, "stop": 1692099166217, "uuid": "2540d7a9-ae48-44d2-82e2-ca43e25949a3", "historyId": "f80267354442df5b1d77494833f4aabe", "testCaseId": "f80267354442df5b1d77494833f4aabe", "fullName": "tests.test_vwologin#test_vwologin", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_vwologin"}, {"name": "host", "value": "DESKTOP-CG4JEI1"}, {"name": "thread", "value": "28948-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_vwologin"}]}